<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<!DOCTYPE sqlMap
        PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN"
        "http://www.ibatis.com/dtd/sql-map-2.dtd">
<!--
 Copyright (c) 2007 HomeAway, Inc.
  All rights reserved.  http://www.atomserver.org

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<sqlMap>

    <select id="noop" >
        <isEqual property="dbType" compareValue="sqlserver" >
            SELECT COUNT(*) FROM AtomWorkspace as noop;
        </isEqual>
        <isEqual property="dbType" compareValue="postgres" >
            SELECT 1
        </isEqual>
        <isEqual property="dbType" compareValue="hsql">
            CALL IDENTITY()
        </isEqual>       
    </select>

    <select id="acquireLock" resultClass="int">
      <dynamic>
        <isEqual property="dbType" compareValue="sqlserver" >
            DECLARE @result int;
            EXEC @result = sp_getapplock @Resource='ATOMSERVER_APPLOCK', @LockMode='Exclusive', @LockTimeout='${db.timeout.applock}';
            SELECT @result as status
        </isEqual>
        <isEqual property="dbType" compareValue="postgres" >
            LOCK TABLE EntryStore IN EXCLUSIVE MODE;
            SELECT 1
        </isEqual>
        <isEqual property="dbType" compareValue="hsql">
            CALL IDENTITY()
        </isEqual>
      </dynamic>
    </select>

    <insert id="insertEntry-sqlserver" parameterClass="map">
        INSERT INTO EntryStore
        (Workspace, Collection, LanCode, CountryCode, EntryId, UpdateDate, CreateDate, UpdateSeqNum, DeleteFlag, RevisionNum)
        VALUES
        (#workspace#, #collection#, #language#, #country#, #entryId#, ${db.getdate.func}, ${db.getdate.func}, 0, #deleted#, #revision#)

        <selectKey resultClass="int" keyProperty="entryStoreId" type="post">
            SELECT @@IDENTITY AS entryStoreId
        </selectKey>
     </insert>

    <insert id="insertEntry-postgres" parameterClass="map">

        <selectKey resultClass="int" type="pre" keyProperty="entryStoreId" >
            SELECT nextval('entrystore_entrystoreid_seq')
        </selectKey>
        
         INSERT INTO EntryStore
         (EntryStoreId, Workspace, Collection, LanCode, CountryCode, EntryId, UpdateDate, CreateDate, UpdateSeqNum, DeleteFlag, RevisionNum)
         VALUES
         (#entryStoreId#, #workspace#, #collection#, #language#, #country#, #entryId#, ${db.getdate.func}, ${db.getdate.func}, 0, #deleted#, #revision#)
     </insert>

    <insert id="insertEntry-hsql" parameterClass="map">
         INSERT INTO EntryStore
         (EntryStoreId, Workspace, Collection, LanCode, CountryCode, EntryId, UpdateDate, CreateDate, UpdateSeqNum, DeleteFlag, RevisionNum, UpdateTimestamp)
         VALUES
         (#entryStoreId#, #workspace#, #collection#, #language#, #country#, #entryId#, ${db.getdate.func}, ${db.getdate.func}, 0, #deleted#, #revision#,
          NEXT VALUE FOR entrystore_updatetimestamp_seq)

        <selectKey resultClass="int" keyProperty="entryStoreId" type="post">
            CALL IDENTITY();
        </selectKey>
     </insert>

    <insert id="insertEntrySeedingDB-sqlserver" parameterClass="map">
         INSERT INTO EntryStore
         (Workspace, Collection, LanCode, CountryCode, EntryId, UpdateDate, CreateDate, UpdateSeqNum, DeleteFlag, RevisionNum)
         VALUES
         (#workspace#, #collection#, #language#, #country#, #entryId#, #updatedDate#, #publishedDate#, 0, #deleted#, #revision#)
     </insert>

    <insert id="insertEntrySeedingDB-postgres" parameterClass="map">
        <selectKey resultClass="int" type="pre" keyProperty="entryStoreId" >
            SELECT nextval('entrystore_entrystoreid_seq')
        </selectKey>

          INSERT INTO EntryStore
         (EntryStoreId, Workspace, Collection, LanCode, CountryCode, EntryId, UpdateDate, CreateDate, UpdateSeqNum, DeleteFlag, RevisionNum)
         VALUES
         (#entryStoreId#, #workspace#, #collection#, #language#, #country#, #entryId#, #updatedDate#, #publishedDate#, 0, #deleted#, #revision#)
     </insert>

    <insert id="insertEntrySeedingDB-hsql" parameterClass="map">
          INSERT INTO EntryStore
         (EntryStoreId, Workspace, Collection, LanCode, CountryCode, EntryId, UpdateDate, CreateDate, UpdateSeqNum, DeleteFlag, RevisionNum, UpdateTimestamp)
         VALUES
         (#entryStoreId#, #workspace#, #collection#, #language#, #country#, #entryId#, #updatedDate#, #publishedDate#, 0, #deleted#, #revision#,
          NEXT VALUE FOR entrystore_updatetimestamp_seq)

        <selectKey resultClass="int" keyProperty="entryStoreId" type="post">
            CALL IDENTITY();
        </selectKey>
     </insert>

    <update id="updateEntry" parameterClass="map">
        <!-- UPDATE an entry - this involves setting the UpdateDate and DeleteFlag, and
             incrementing the RevisionNum.  The UpdateTimestamp is automatically handled by the
             DB -->
        UPDATE EntryStore
           SET UpdateDate=${db.getdate.func}, DeleteFlag=#deleted#, RevisionNum=RevisionNum + 1
         <dynamic>
            <isEqual prepend="," property="dbType" compareValue="postgres">
               UpdateTimestamp=nextval('entrystore_updatetimestamp_seq'::regclass)
            </isEqual>
            <isEqual prepend="," property="dbType" compareValue="hsql">
               UpdateTimestamp= NEXT VALUE FOR entrystore_updatetimestamp_seq
            </isEqual>
         </dynamic>
         WHERE EntryStoreId = CAST(#entryStoreId# AS int)
        <isNotEqual property="revision" compareValue="-1">
            AND RevisionNum = (CAST(#revision# AS int) - 1)
        </isNotEqual>
    </update>

    <update id="updateEntryOverwrite" parameterClass="map">
        <!-- THIS IS FOR TESTING ONLY (DB seeding) -->
        <![CDATA[
        UPDATE EntryStore
           SET DeleteFlag=#deleted#
        ]]>
        <dynamic>
            <isEqual prepend="," property="revision" compareValue="-1">
                RevisionNum=RevisionNum + 1
            </isEqual>
            <isEqual prepend="," property="revision" compareValue="0">
                RevisionNum = CAST(#revision# AS int)
            </isEqual>
            <isNull prepend="," property="publishedDate">
                CreateDate=${db.getdate.func}
            </isNull>
            <isNotNull prepend="," property="publishedDate">
                CreateDate=#publishedDate#
            </isNotNull>
            <isNull prepend="," property="updatedDate">
                UpdateDate=${db.getdate.func}
            </isNull>
            <isNotNull prepend="," property="updatedDate">
                UpdateDate=#updatedDate#
            </isNotNull>
            <isEqual prepend="," property="dbType" compareValue="postgres">
               UpdateTimestamp=nextval('entrystore_updatetimestamp_seq'::regclass)
            </isEqual>            
            <isEqual prepend="," property="dbType" compareValue="hsql">
                UpdateTimestamp= NEXT VALUE FOR entrystore_updatetimestamp_seq
            </isEqual>
        </dynamic>
        WHERE EntryStoreId = CAST(#entryStoreId# AS int)
        <isEqual property="deleted" compareValue="true">
            AND DeleteFlag = 0
        </isEqual>
    </update>

    <delete id="deleteEntry" parameterClass="map">
        <!-- this is ONLY used for testing - thus, we do NOT verify that revision matches -->
        <![CDATA[
        DELETE FROM EntryStore
         WHERE Workspace=#workspace#
           AND Collection=#collection#
           AND LanCode=#language#
           AND CountryCode=#country#
           AND EntryId=#entryId#
        ]]>
        <isEqual property="deleted" compareValue="true">
            AND DeleteFlag = 0
        </isEqual>
    </delete>

    <delete id="deleteEntriesAll" parameterClass="map">
        <![CDATA[
        DELETE FROM EntryStore
         WHERE Workspace = #workspace#
        ]]>
        <isNotNull property="collection">
            AND Collection=#collection#
        </isNotNull>
    </delete>

    <delete id="deleteAllRowsFromEntries">
        DELETE FROM EntryStore
    </delete>

</sqlMap>

