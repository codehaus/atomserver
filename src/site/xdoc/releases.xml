<?xml version="1.0" encoding="ISO-8859-1"?>
<document url="http://java-build.wvrgroup.internal:/opt/sites/atomserver/releases.html">

    <properties>
        <title>Release Notes</title>
        <author email="chriswberry@gmail.com">Chris Berry</author>
    </properties>

    <body>
        <section name="Release 2.1-SNAPSHOT (??/??/08)">
            <ol>
                <li>Better performance for aggregate feeds</li>
                <li>Add tests for DB-based ContentStorage</li>
                <li>Now build a Jar as well as a War. Cleaned up the DBSeeder to use resources(widgets) from the Jar.
                    Added a documentation on deployment options for AtomServer</li>
                <li>Add setenv script for Tomcat. Cleanup Jars that get included with the War.
                    Create new /lib dir in the standalone version to house Jetty and Servlet API,
                    which fixes Tomcat deploy issue</li>
                <li>Cleaned up API to remove RequestContext from the abstract methods of AbstractAtomCollection</li>
                <li>Added a very simple standalone AtomServer (TestingAtomServer) for Atom client unit testing.
                    Made HsqlBootstrapper restartable, and made TestingAtomServer do so on each construction</li>
                <li>Refactor to handle generic "virtual workspaces". Consolidate all DB-based Category handling
                    into EntryCategoriesHandler, including all DAO access.
                    Consolidate to an AtomService level CategoriesHandler.
                    Add access to the Abdera ServiceContext to AtomService</li>
                <li>Added an optional ability to "log" all changes to Categories. This ability is critical to
                    applications that use Categories to manage a State Machine for a given Workspace,
                    and want a log of all State changes for a given Entry.
                    This is enabled by setting the "loggingAllCategoryEvents" to true in 
                    the "org.atomserver-entryCategoriesHandler" Spring Bean</li>
                <li>Fixed unneccessary failure for race condition on creation of new collections</li>
            </ol>

        </section>

        <section name="Release 2.0.1 (6/23/08)">
            <ol>
                <li>Added a "throttled" AtomServer. This AtomServer throttles all PUTs, POSTs, and DELETEs
                    using a ThreadPool front-ended with a Blocking Queue. When all Threads in the Pool are in use,
                    incoming requests are queued up. The theory is that, because we serialize all writes to the DB,
                    when it is overloaded its performance degrades significantly, and that by throttling DB input
                    to some optimum threshold we can maximize performance. This theory was proven out in
                    performance testing. We saw a 220% decrease in average response time for PUTs for
                    the throttled AtomServer, with a relatively constant TPM, and smooth behavior.
                    In contrast the "normal" AtomServer saw spiky behavior, and significant performance degradation.
                    </li>
                <li>Aggregate Feeds were completely rewritten.</li>
                <li>Added "sharded paths" file-based ContentStorage. </li>
                <li>Gzipping for file-based ContentStorage.</li>
                <li>Cleaned up the Junits significantly. The tests no longer use a local "var" directory. </li>
                <li>Google Analytics for the site</li>
            </ol>
        </section>

        <section name="Release 2.0 (5/13/08)">
            <ol>
                <li>This is the initial open source release.
                It is numbered 2.0 because the code behind AtomServer has been around
                as an internal application for about 1 year, and over that time went through many revisions</li>
            </ol>
        </section>

    </body>
</document>








                 
