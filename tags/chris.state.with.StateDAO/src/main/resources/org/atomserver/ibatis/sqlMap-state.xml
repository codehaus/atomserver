<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<!DOCTYPE sqlMap
    PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN"
    "http://www.ibatis.com/dtd/sql-map-2.dtd">
<!--
 Copyright (c) 2007 HomeAway, Inc.
  All rights reserved.  http://www.atomserver.org

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<!--  iBatis SQL Map for EntryState -->


<!--

/*==============================================================*/
/* Table: EntryState                                           */
/*==============================================================*/
CREATE TABLE EntryState (
EntryStateId        SERIAL                  NOT NULL,
EntryStoreId        INT                     NOT NULL,
CreateDate          TIMESTAMP               NOT NULL,
ServerIp            VARCHAR(15)             NOT NULL,
ServiceName         VARCHAR(128)            NOT NULL,
State               VARCHAR(128)            NOT NULL,
Message             VARCHAR(512)            NOT NULL,
PRIMARY KEY (EntryStateId),
FOREIGN KEY (EntryStoreId) REFERENCES EntryStore(EntryStoreId)
);

-->

<sqlMap>

    <sql id="insertStateFragment">
        INSERT INTO EntryState (EntryStoreId, CreateDate, ServerIp, ServiceName, State, Message)
        <dynamic>
        <isNotNull property="entryStoreId">
            VALUES (#entryStoreId#, ${db.getdate.func}, #serverIp#, #serviceName#, #state#, #message#)
        </isNotNull>
        <isNull property="entryStoreId">
            SELECT EntryStoreId, ${db.getdate.func}, #serverIp#, #serviceName#, #state#, #message#
              FROM EntryStore
             WHERE Workspace=#workspace#
               AND Collection=#collection#
               AND EntryId=#entryId#
               AND LanCode=#language#
               AND CountryCode=#country#
        </isNull>
        </dynamic>
    </sql>

  <!-- #################### insert ############### -->
    <insert id="insertEntryState-postgres" parameterClass="entryState">
        <selectKey resultClass="int" type="pre" keyProperty="entryStateId" >
            SELECT nextval('entrystate_entrystateid_seq')
        </selectKey>

        <include refid="insertStateFragment" />
    </insert>

    <insert id="insertEntryState-sqlserver" parameterClass="entryState">
        <include refid="insertStateFragment" />

        <selectKey resultClass="int" keyProperty="entryStateId" type="post">
            SELECT @@IDENTITY AS entryStateId
        </selectKey>
    </insert>

    <insert id="insertEntryState-hsql" parameterClass="entryState">
        <include refid="insertStateFragment" />

        <selectKey resultClass="int" keyProperty="entryStateId" type="post">
            CALL IDENTITY();
        </selectKey>
    </insert>


  <!-- #################### select ############### -->
  <!-- This SELECT is pretty useless, since you already had to know everything in the row to do the SELECT
       But its helpful in tests -->
  <select id="selectEntryState" parameterClass="entryState" resultMap="entryStateResult" >
    SELECT
    EntryStore.EntryStoreId AS EntryStoreId,
      Workspace, Collection, EntryId, EntryStateId, CreateDate, ServerIp, ServiceName, State, Message
    FROM EntryState JOIN EntryStore ON EntryState.EntryStoreId = EntryStore.EntryStoreId
      <isNotNull property="entryStoreId">
          WHERE EntryStore.EntryStoreId = #entryStoreId#
      </isNotNull>
      <isNull property="entryStoreId">
          WHERE EntryStore.EntryStoreId = (SELECT EntryStoreId FROM EntryStore
                                            WHERE Workspace=#workspace#
                                              AND Collection=#collection#
                                              AND EntryId=#entryId#
                                              AND LanCode=#language#
                                              AND CountryCode=#country#)
      </isNull>
    AND Type=#type#
    AND CreateDate=#createDate#
  </select>


  <!-- #################### delete  ############### -->
  <delete id="deleteEntryState" parameterClass="entryState" >
    DELETE FROM EntryState
      <isNotNull property="entryStoreId">
          WHERE EntryStoreId = #entryStoreId#
      </isNotNull>
      <isNull property="entryStoreId">
          WHERE EntryStoreId = (SELECT EntryStoreId FROM EntryStore
                                 WHERE Workspace=#workspace#
                                   AND Collection=#collection#
                                   AND EntryId=#entryId#
                                   AND LanCode=#language#
                                   AND CountryCode=#country#)
      </isNull>
      AND Type=#type#
      AND CreateDate=#createDate#
  </delete>

</sqlMap>
