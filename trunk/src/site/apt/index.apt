 AtomServer is a generic data store implemented as a REST-ful web service. It is designed as a GData-style Atom Store.
 AtomServer is based on the following concepts and protocols;
 
    * <<REST>>. REST is a design pattern. It's not a technology like SOAP or HTTP.  Instead, REST is a novel technique
    to decompose an application into smaller parts, so that the whole works better in a distributed setting.
    REST is a proven design pattern for building loosely-coupled, highly-scalable applications.
    There are important benefits to sticking to the REST design pattern;
 
      ** <<Simple.>> REST is incredibly simple to define. There are just a handful of principles
      and well defined semantics associated with it.

      ** <<Scalable.>> REST leads to a very scalable solution by promoting a stateless protocol
      and allowing state to be distributed across the web.

      ** <<Layered.>> REST allows any number of intermediaries, such as proxies, gateways, and firewalls.
      Similarly, because REST is ultimately just a web site,
      albeit one that adheres to a design pattern, one can easily layer aspects such as Security,
      Compression, etc. on an as needed basis, as they would with any web site.
    
    * <<Atom.>> Fundamentally, Atom is an XML vocabulary for describing lists of timestamped entries.
    These entries can be anything, although because Atom was originally conceived to replace RSS.
    Atom lists are Feeds, and the items in the lists are Entries. Atom is a REST-ful protocol.

 AtomServer stands on the shoulders of giants. It is built on top of several open source projects -
 most notably, Apache Abdera (a Java-based Atom Publishing framework) and Spring.

 Because AtomServer is an Atom Data Store, it requires a relational database to run.
 AtomServer currently supports; PostgresSQL, SQLServer, and HSQLDB.
 Using HSQLDB, AtomServer requires zero configuration and can run out-of-the-box.
 While this configuration is suitable for many applications, those that see significant load
 will likely require a database with better transactional symantics, such as PostgreSQL.

 AtomServer is easy to use. It deploys as a simple WAR file into any Servlet container.
 Or alternately, can be used out-of-the-box as a standalone server, running within an embedded Jetty Server.
 Most applications should be able to use AtomServer by simply providing a very small amount of configuration
 - a few Spring Beans that configure the application's Atom Workspaces and the Content storage.

 AtomServer has been built to allow for easy extention. It contains an extendable ClassLoader which can
 be configured to look for Resources hierarchially in specified directories.

 AtomServer is battle-hardened. It is used as the Production data store for a large web site,
 where it recieves over 1 million hits a day, with transaction rates often exceeding 100/sec.
 (and much more in load testing). Where not only must this data be delivered in a timely fashion,
 it must also, first and foremost, be transactionally correct.

