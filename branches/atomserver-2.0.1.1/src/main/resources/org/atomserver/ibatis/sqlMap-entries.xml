<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<!DOCTYPE sqlMap
        PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN"
        "http://www.ibatis.com/dtd/sql-map-2.dtd">
<!--
 Copyright (c) 2007 HomeAway, Inc.
  All rights reserved.  http://www.atomserver.org

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--  iBatis SQL Map for EntryStore -->
<sqlMap>


    <!-- EXEC sp_getapplock @Resource='ATOMSERVER_APPLOCK', @LockMode='EXCLUSIVE', @LockTimeout='${db.timeout.applock}' -->

    <!-- ####################  lock table ############### -->
    <select id="acquireLock">
      <dynamic>
        <isEqual property="dbType" compareValue="sqlserver" >
            EXEC sp_getapplock @Resource='ATOMSERVER_APPLOCK', @LockMode='EXCLUSIVE'
        </isEqual>
        <isEqual property="dbType" compareValue="postgres" >
            LOCK TABLE EntryStore IN EXCLUSIVE MODE
        </isEqual>
        <isEqual property="dbType" compareValue="hsql">
            CALL IDENTITY()
        </isEqual>
      </dynamic>
    </select>

    <!-- ####################  lock table ############### -->
    <select id="releaseLock">
      <dynamic>
        <isEqual property="dbType" compareValue="sqlserver" >
            EXEC sp_releaseapplock @Resource='ATOMSERVER_APPLOCK'
        </isEqual>
      </dynamic>
    </select>

    <!-- #################### insert ############### -->
    <insert id="insertEntry-sqlserver" parameterClass="map">
        INSERT INTO EntryStore
        (Workspace, Collection, LanCode, CountryCode, EntryId, UpdateDate, CreateDate, UpdateSeqNum, DeleteFlag, RevisionNum)
        VALUES
        (#workspace#, #collection#, #language#, #country#, #entryId#, ${db.getdate.func}, ${db.getdate.func}, 0, #deleted#, #revision#)

        <selectKey resultClass="int" keyProperty="entryStoreId" type="post">
            SELECT @@IDENTITY AS entryStoreId
        </selectKey>
     </insert>

    <insert id="insertEntry-postgres" parameterClass="map">

        <selectKey resultClass="int" type="pre" keyProperty="entryStoreId" >
            SELECT nextval('entrystore_entrystoreid_seq')
        </selectKey>
        
         INSERT INTO EntryStore
         (EntryStoreId, Workspace, Collection, LanCode, CountryCode, EntryId, UpdateDate, CreateDate, UpdateSeqNum, DeleteFlag, RevisionNum)
         VALUES
         (#entryStoreId#, #workspace#, #collection#, #language#, #country#, #entryId#, ${db.getdate.func}, ${db.getdate.func}, 0, #deleted#, #revision#)
     </insert>

    <insert id="insertEntry-hsql" parameterClass="map">
         INSERT INTO EntryStore
         (EntryStoreId, Workspace, Collection, LanCode, CountryCode, EntryId, UpdateDate, CreateDate, UpdateSeqNum, DeleteFlag, RevisionNum, UpdateTimestamp)
         VALUES
         (#entryStoreId#, #workspace#, #collection#, #language#, #country#, #entryId#, ${db.getdate.func}, ${db.getdate.func}, 0, #deleted#, #revision#,
          NEXT VALUE FOR entrystore_updatetimestamp_seq)

        <selectKey resultClass="int" keyProperty="entryStoreId" type="post">
            CALL IDENTITY();
        </selectKey>
     </insert>

    <insert id="insertEntrySeedingDB-sqlserver" parameterClass="map">
         INSERT INTO EntryStore
         (Workspace, Collection, LanCode, CountryCode, EntryId, UpdateDate, CreateDate, UpdateSeqNum, DeleteFlag, RevisionNum)
         VALUES
         (#workspace#, #collection#, #language#, #country#, #entryId#, #lastModifiedDate#, #publishedDate#, 0, #deleted#, #revision#)
     </insert>

    <insert id="insertEntrySeedingDB-postgres" parameterClass="map">
        <selectKey resultClass="int" type="pre" keyProperty="entryStoreId" >
            SELECT nextval('entrystore_entrystoreid_seq')
        </selectKey>

          INSERT INTO EntryStore
         (EntryStoreId, Workspace, Collection, LanCode, CountryCode, EntryId, UpdateDate, CreateDate, UpdateSeqNum, DeleteFlag, RevisionNum)
         VALUES
         (#entryStoreId#, #workspace#, #collection#, #language#, #country#, #entryId#, #lastModifiedDate#, #publishedDate#, 0, #deleted#, #revision#)
     </insert>

    <insert id="insertEntrySeedingDB-hsql" parameterClass="map">
          INSERT INTO EntryStore
         (EntryStoreId, Workspace, Collection, LanCode, CountryCode, EntryId, UpdateDate, CreateDate, UpdateSeqNum, DeleteFlag, RevisionNum, UpdateTimestamp)
         VALUES
         (#entryStoreId#, #workspace#, #collection#, #language#, #country#, #entryId#, #lastModifiedDate#, #publishedDate#, 0, #deleted#, #revision#,
          NEXT VALUE FOR entrystore_updatetimestamp_seq)

        <selectKey resultClass="int" keyProperty="entryStoreId" type="post">
            CALL IDENTITY();
        </selectKey>
     </insert>

    <!-- #################### select ############### -->
    <sql id="SELECT_EntryStoreId">
        SELECT entry.EntryStoreId AS EntryStoreId
          FROM EntryStore entry
         WHERE Workspace=#workspace#
           AND Collection=#collection#
           AND LanCode=#language#
           AND CountryCode=#country#
           AND EntryId=#entryId#
    </sql>

    <select id="selectEntryInternalId" parameterClass="map" resultClass="int">
         <include refid="SELECT_EntryStoreId" />
    </select>

    <sql id="SELECT_EntryStore">
        <!-- this fragment encapsulates selecting the relevant columns from the EntryStore only,
             without JOINing in the EntryCategory table -->
        SELECT EntryStoreId,
               Workspace, Collection, LanCode, CountryCode, EntryId,
               UpdateDate, CreateDate,
               <include refid="timestampColumn" />,
               DeleteFlag, RevisionNum
          FROM EntryStore
    </sql>

    <sql id="SELECT_EntryStore_JOIN_EntryCategory">
        <!-- this fragment encapsulates selecting the relevant columns from the EntryStore and
             EntryCategory tables when pulling back entries, whether retrieving a single Entry or
             an entire Feed -->
        SELECT DISTINCT
               entry.EntryStoreId AS EntryStoreId,
               entry.Workspace AS Workspace,
               entry.Collection AS Collection,
               entry.LanCode AS LanCode,
               entry.CountryCode AS CountryCode,
               entry.EntryId AS EntryId,
               entry.UpdateDate AS UpdateDate,
               entry.CreateDate AS CreateDate,
               <include refid="timestampColumn" />,
               entry.DeleteFlag AS DeleteFlag,
               entry.RevisionNum AS RevisionNum,
               cat.Scheme AS Scheme,
               cat.Term AS Term,
               cat.Label AS Label
          FROM EntryStore entry
          LEFT OUTER JOIN EntryCategory cat
            ON entry.EntryStoreId = cat.EntryStoreId
    </sql>


    <select id="selectEntryByInternalId" parameterClass="map" resultMap="entryResult">
        <!-- SELECT a single Entry when we already know its primary key -->
        <include refid="SELECT_EntryStore_JOIN_EntryCategory"/>
        WHERE entry.EntryStoreId = #internalId#
    </select>

    <select id="selectEntry" parameterClass="map" resultMap="entryResult">
        <!-- SELECT a single Entry based on the 5-tuple key -->
       SELECT DISTINCT
              entry.EntryStoreId AS EntryStoreId,
              entry.Workspace AS Workspace,
              entry.Collection AS Collection,
              entry.LanCode AS LanCode,
              entry.CountryCode AS CountryCode,
              entry.EntryId AS EntryId,
              entry.UpdateDate AS UpdateDate,
              entry.CreateDate AS CreateDate,
              <include refid="timestampColumn" />,
              entry.DeleteFlag AS DeleteFlag,
              entry.RevisionNum AS RevisionNum,
              cat.Scheme AS Scheme,
              cat.Term AS Term,
              cat.Label AS Label
         FROM EntryStore entry
         LEFT OUTER JOIN EntryCategory cat
           ON entry.EntryStoreId = cat.EntryStoreId
        WHERE entry.Workspace=#workspace#
          AND entry.Collection=#collection#
          AND LanCode=#language#
          AND CountryCode=#country#
          AND entry.EntryId=#entryId#
    </select>

    <!-- #################### select ############### -->
    <select id="selectEntries" parameterClass="map" resultMap="entryResult">
        <!-- SELECT all the entries that match some part of the 5-tuple key -->
        <include refid="SELECT_EntryStore_JOIN_EntryCategory"/>
        WHERE entry.Workspace=#workspace#
        <dynamic>
            <isNotNull property="collection">
                AND entry.Collection=#collection#
            </isNotNull>
            <isNotNull property="entryId">
                AND entry.EntryId=#entryId#
            </isNotNull>
            <isNotNull property="language">
                AND LanCode=#language#
            </isNotNull>
            <isNotNull property="country">
                AND CountryCode=#country#
            </isNotNull>
        </dynamic>
    </select>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <select id="selectEntryBatch" parameterClass="map" resultMap="entryResult">
        <!-- SELECT a batch of specific Entries from the DB based on the 5-tuple keys -->
        <include refid="SELECT_EntryStore_JOIN_EntryCategory"/>
        <![CDATA[
        WHERE entry.Workspace=#workspace#
          AND entry.Collection=#collection#
          AND LanCode=#language#
          AND CountryCode=#country#
          AND entry.EntryId IN
        ]]>
        <iterate property="entryIds" open="(" close=")" conjunction=",">#entryIds[]#</iterate>
          ORDER BY UpdateTimestamp ASC
    </select>

    <!-- #################### update  ############### -->


    <update id="updateEntry" parameterClass="map">
        <!-- UPDATE an entry - this involves setting the UpdateDate and DeleteFlag, and
             incrementing the RevisionNum.  The UpdateTimestamp is automatically handled by the
             DB -->
        UPDATE EntryStore
           SET UpdateDate=${db.getdate.func}, DeleteFlag=#deleted#, RevisionNum=RevisionNum + 1
         <dynamic>
            <isEqual prepend="," property="dbType" compareValue="postgres">
               UpdateTimestamp=nextval('entrystore_updatetimestamp_seq'::regclass)
            </isEqual>
            <isEqual prepend="," property="dbType" compareValue="hsql">
               UpdateTimestamp= NEXT VALUE FOR entrystore_updatetimestamp_seq
            </isEqual>
         </dynamic>
         WHERE EntryStoreId=#entryStoreId#
        <isNotEqual property="revision" compareValue="-1">
            AND RevisionNum=#revision#
        </isNotEqual>
    </update>

    <update id="updateEntryOverwrite" parameterClass="map">
        <!-- THIS IS FOR TESTING ONLY (DB seeding) -->
        <![CDATA[
        UPDATE EntryStore
           SET DeleteFlag=#deleted#
        ]]>
        <dynamic>
            <isEqual prepend="," property="revision" compareValue="-1">
                RevisionNum=RevisionNum + 1
            </isEqual>
            <isEqual prepend="," property="revision" compareValue="0">
                RevisionNum=#revision#
            </isEqual>
            <isNull prepend="," property="publishedDate">
                CreateDate=${db.getdate.func}
            </isNull>
            <isNotNull prepend="," property="publishedDate">
                CreateDate=#publishedDate#
            </isNotNull>
            <isNull prepend="," property="lastModifiedDate">
                UpdateDate=${db.getdate.func}
            </isNull>
            <isNotNull prepend="," property="lastModifiedDate">
                UpdateDate=#lastModifiedDate#
            </isNotNull>
            <isEqual prepend="," property="dbType" compareValue="postgres">
               UpdateTimestamp=nextval('entrystore_updatetimestamp_seq'::regclass)
            </isEqual>            
            <isEqual prepend="," property="dbType" compareValue="hsql">
                UpdateTimestamp= NEXT VALUE FOR entrystore_updatetimestamp_seq
            </isEqual>
        </dynamic>
        WHERE EntryStoreId=#entryStoreId#
        <isEqual property="deleted" compareValue="true">
            AND DeleteFlag = 0
        </isEqual>
    </update>

    <!-- #################### delete  ############### -->
    <delete id="deleteEntry" parameterClass="map">
        <!-- this is ONLY used for testing - thus, we do NOT verify that revision matches -->
        <![CDATA[
        DELETE FROM EntryStore
         WHERE Workspace=#workspace#
           AND Collection=#collection#
           AND LanCode=#language#
           AND CountryCode=#country#
           AND EntryId=#entryId#
        ]]>
        <isEqual property="deleted" compareValue="true">
            AND DeleteFlag = 0
        </isEqual>
    </delete>

    <!-- #################### List Queries  ############### -->
    <select id="selectEntriesByLastModified" parameterClass="map" resultMap="entryResult">
        <!-- SELECT the entries that were last modified since the given time -->
        <include refid="SELECT_EntryStore_JOIN_EntryCategory"/>
        <![CDATA[
        WHERE UpdateDate >= #lastModifiedDate#
          AND entry.Workspace = #workspace#
        ]]>
        <isNotNull property="collection">
          AND entry.Collection=#collection#
        </isNotNull>
        ORDER BY UpdateDate
    </select>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <select id="selectEntriesByLastModifiedSeqNum" parameterClass="map" resultMap="entryResult">
        <include refid="SELECT_EntryStore_JOIN_EntryCategory"/>
        <![CDATA[
        WHERE UpdateDate >= #lastModifiedDate#
          AND entry.Workspace = #workspace#
        ]]>
        <isNotNull property="collection">
          AND entry.Collection=#collection#
        </isNotNull>
        ORDER BY UpdateTimestamp
    </select>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <!-- NOTE: see sqlMap-fragments for details-->
    <select id="selectEntriesByPage" parameterClass="map" resultMap="entryResultSansCategories">
        SELECT
        <include refid="paginationPrefix"/>
        <include refid="selectEntriesByPageSansCategories_fragment"/>
        ORDER BY UpdateTimestamp
        <include refid="paginationSuffix"/>
    </select>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <!-- NOTE: see sqlMap-fragments for details-->
    <select id="selectEntriesByPageAndLocale" parameterClass="map" resultMap="entryResultSansCategories">
        SELECT
        <include refid="paginationPrefix"/>
        <include refid="selectEntriesByPageAndLocaleSansCategories_fragment"/>
        ORDER BY UpdateTimestamp
        <include refid="paginationSuffix"/>
    </select>

    <!-- #################### Count  ############### -->
    <select id="countEntriesTotal" parameterClass="map" resultClass="int">
        <![CDATA[
        SELECT COUNT(*) as entrycount FROM EntryStore
         WHERE Workspace = #workspace#
        ]]>
        <isNotNull property="collection">
            AND Collection=#collection#
        </isNotNull>
    </select>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <select id="countEntriesByLastModified" parameterClass="map" resultClass="int">
        <![CDATA[
        SELECT COUNT(*) as entrycount FROM EntryStore
         WHERE UpdateDate >= #lastModifiedDate#
           AND Workspace = #workspace#
        ]]>
        <isNotNull property="collection">
            AND Collection=#collection#
        </isNotNull>
    </select>

    <!-- #################### Delete All ############### -->
    <delete id="deleteEntriesAll" parameterClass="map">
        <![CDATA[
        DELETE FROM EntryStore
         WHERE Workspace = #workspace#
        ]]>
        <isNotNull property="collection">
            AND Collection=#collection#
        </isNotNull>
    </delete>

    <!-- #################### Delete All ############### -->
    <delete id="deleteAllRowsFromEntries">
        DELETE FROM EntryStore
    </delete>

    <insert id="createWorkspace" parameterClass="map">
        <![CDATA[
        INSERT INTO AtomWorkspace(Workspace, SeqNum)
        VALUES(#workspace#, '0')
         ]]>
    </insert>

    <insert id="createCollection" parameterClass="map">
        <![CDATA[
        INSERT INTO AtomCollection(Workspace, Collection)
        VALUES(#workspace#, #collection#)
        ]]>
    </insert>

    <select id="workspaceExists" parameterClass="map" resultClass="int">
        <![CDATA[
        SELECT COUNT(Workspace) AS workspaceCount
        FROM AtomWorkspace
        WHERE Workspace = #workspace#
        ]]>
    </select>

    <select id="collectionExists" parameterClass="map" resultClass="int">
        <![CDATA[
        SELECT COUNT(Collection) AS collectionCount
          FROM AtomCollection
         WHERE Workspace = #workspace#
           AND Collection = #collection#
        ]]>
    </select>

    <select id="listWorkspaces" resultClass="string">
        <![CDATA[
        SELECT Workspace
          FROM AtomWorkspace
        ]]>
    </select>

    <select id="listCollections" parameterClass="map" resultClass="string">
        <![CDATA[
        SELECT Collection
          FROM AtomCollection
         WHERE Workspace = #workspace#
        ]]>
    </select>

</sqlMap>

