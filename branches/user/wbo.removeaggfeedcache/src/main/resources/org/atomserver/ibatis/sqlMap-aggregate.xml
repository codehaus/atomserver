<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">
<!--
 Copyright (c) 2007 HomeAway, Inc.
  All rights reserved.  http://www.atomserver.org

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<sqlMap>

    <!-- NOTE: This query is used for BOTH single Entry and Feed queries
    -->
    <sql id="SELECT_modifiedAggregateEntries">
        SELECT <include refid="paginationPrefix"/>
               recentlyChangedEntries.Term AS AggregateEntryId,
               recentlyChangedEntries.UpdateTimestamp
           <!-- First, we query the view to get the Entries that have been modified since the
                minTimestamp.  The view joins in the EntryStore and the EntryCategory table. -->
          FROM vw_EntryWithCategory recentlyChangedEntries <include refid="WITH_NOEXPAND"/>
         <include refid="INNER_LOOP_JOIN"/>
               vw_EntryWithCategory matchingSiblingEntries <include refid="WITH_NOEXPAND"/>
           <!-- This first set of constraints gets all entries that have been modified since
                the minTimestamp that also match the join scheme. Since VW_EntryWithCategory
                has an index of Scheme, UpdateTimestamp and Term it willscan the index forward
                from the minTimestamp.-->
            ON recentlyChangedEntries.Scheme = #collection#
        <isNotNull property="startIndex">
           AND recentlyChangedEntries.UpdateTimestamp > CAST(#startIndex# AS <include refid="timestampType"/>)
            <isNotEqual property="endIndex" compareValue="-1">
               AND recentlyChangedEntries.UpdateTimestamp &lt;= CAST(#endIndex# AS <include refid="timestampType"/>)
            </isNotEqual>
        </isNotNull>

        <isNotNull property="updatedMin" >
           AND recentlyChangedEntries.UpdateDate >= #updatedMin#
        </isNotNull>
        <isNotNull property="updatedMax">
            <![CDATA[ AND recentlyChangedEntries.UpdateDate < #updatedMax# ]]>
        </isNotNull>
        
        <isNotNull property="latencySeconds">
           AND (
            <isEqual property="dbType" compareValue="hsql">
             DATEDIFF('ss', recentlyChangedEntries.UpdateDate, NOW()) >= $latencySeconds$
            </isEqual>
            <isEqual property="dbType" compareValue="sqlserver">
             DATEADD(s, -1 * $latencySeconds$, GETDATE()) >= recentlyChangedEntries.UpdateDate
            </isEqual>
            <isEqual property="dbType" compareValue="postgres">
             NOW() - interval '$latencySeconds$ seconds' >= recentlyChangedEntries.UpdateDate
            </isEqual>
            )
        </isNotNull>
           <!-- This same query can be used to pull a SINGLE aggregate entry.  Note that we should
                never provide both updateTimestamp AND entryId. -->
        <isNotNull property="entryId">
           AND recentlyChangedEntries.Term = #entryId#
        </isNotNull>
           <!-- We join in the matching sibling entries by joining on the scheme and term. We also
                matchingSiblingEntries to only get entries that either match the locale or have no
                locale.  The reason for this is that the semantics of aggregate feeds state that
                an aggregate contains all entries that either match the locale or have no locale AS
                LONG AS at least one sub-entry matches the locale. The 'as long as' piece is
                handled in the GROUP BY below.-->
           AND matchingSiblingEntries.Scheme = #collection#
           AND matchingSiblingEntries.Term = recentlyChangedEntries.Term
        <isNotNull property="language">
           AND ((matchingSiblingEntries.LanCode = #language# AND matchingSiblingEntries.CountryCode = #country#)
                OR (matchingSiblingEntries.LanCode = '**' AND matchingSiblingEntries.CountryCode = '**'))
        </isNotNull>
           <!-- If any joinWorkspaces were specified on the query, we need to limit our rows here
                to only include the right rows. -->
        <isNotNull property="joinWorkspaces">
           AND matchingSiblingEntries.Workspace IN
            <iterate property="joinWorkspaces" open="(" close=")" conjunction=",">
               #joinWorkspaces[]#
            </iterate>
        </isNotNull>
           <!-- This final join gets all of the categories for all of the siblings, as we return
                those in each sub-entry of an aggregate feed. Note that at this point we are done
                EXCEPT for the following cases:
                  1. As stated above, we need to get rid of cases where all the sub-entries in an
                     aggregate are non localized (i.e. they all have '**' lanCode and countryCode).
                  2. We need to run the category filter to only get aggregates that match the
                     category.
                  3. In cases where 2 sub-entries belonging to the same aggregate have both been
                     modified since minTimestamp, right now we'll get 2 aggregate entry results
                     even though both of these aggregates contain the same sub-entries. The
                     semantics of aggregate feeds dictate that we only want to get a single
                     aggregate whose ordered position in the feed is dictated by the most recent
                     change to any of the sub-entries. -->
        <isNotNull property="categoryQuerySql">
          LEFT OUTER JOIN EntryCategory searchCategories
            ON searchCategories.EntryStoreId = matchingSiblingEntries.EntryStoreId
        </isNotNull>
           <!-- each set of rows belonging to the same aggregate entry will have the same scheme
                and term, and the UpdateTimestamp is the timestamp of the "triggering" subentry
                in the aggregate that was modified. -->
         GROUP BY recentlyChangedEntries.Scheme, recentlyChangedEntries.UpdateTimestamp, recentlyChangedEntries.Term
           <!-- This having clause is where we filter out the items described IN #3 above. -->
        HAVING recentlyChangedEntries.UpdateTimestamp = MAX(matchingSiblingEntries.UpdateTimestamp)
           <!-- If all of the sibling entries in a localized aggregate have a lanCode of '**', then
                this constraint gets rid of the aggregate.-->
        <isNotNull property="language">
           AND #language# = MAX(matchingSiblingEntries.LanCode)
        </isNotNull>
           <!-- Finally, we filter out anything that doesn't match the feed URLs category query -->
        <isNotNull property="categoryQuerySql">AND $categoryQuerySql$</isNotNull>
         ORDER BY recentlyChangedEntries.UpdateTimestamp ASC
        <include refid="paginationSuffix"/>
    </sql>

    <!-- restructured version of the above query to minimize group by-having processing. This query
     behaves well when the index is far from the tip but does not run as fast when the tip and start
     index are closer. -->
    <sql id="SELECT_modifiedAggregateEntriesAlt">
           SELECT <include refid="paginationPrefix"/>
                  recentlyChangedEntries.Term AS AggregateEntryId,
                  recentlyChangedEntries.UpdateTimestamp
             FROM (

                  SELECT Term, UpdateTimestamp FROM vw_EntryWithCategory  <include refid="WITH_NOEXPAND"/>
                  WHERE Scheme = #collection#

                  <isNotNull property="startIndex">
                  AND UpdateTimestamp > CAST(#startIndex# AS <include refid="timestampType"/>)
                    <isNotEqual property="endIndex" compareValue="-1">
                    AND UpdateTimestamp &lt;= CAST(#endIndex# AS <include refid="timestampType"/>)
                    </isNotEqual>
                  </isNotNull>

                 <isNotNull property="updatedMin" >
                 AND UpdateDate >= #updatedMin#
                 </isNotNull>

                 <isNotNull property="updatedMax">
                 <![CDATA[ AND UpdateDate < #updatedMax# ]]>
                 </isNotNull>

                 <isNotNull property="latencySeconds">
                 AND (
                   <isEqual property="dbType" compareValue="hsql">
                   DATEDIFF('ss', UpdateDate, NOW()) >= $latencySeconds$
                   </isEqual>
                   <isEqual property="dbType" compareValue="sqlserver">
                   DATEADD(s, -1 * $latencySeconds$, GETDATE()) >= UpdateDate
                   </isEqual>
                   <isEqual property="dbType" compareValue="postgres">
                   NOW() - interval '$latencySeconds$ seconds' >= UpdateDate
                   </isEqual>
                 )
                 </isNotNull>

                 <isNotNull property="entryId">
                 AND Term = #entryId#
                 </isNotNull>

             ) recentlyChangedEntries
             INNER JOIN
                  (
                  SELECT siblings.Term,
                         MAX(siblings.UpdateTimestamp) AS MaxUpdateTimestamp
                  <isNotNull property="language">
                  , MAX(siblings.LanCode) AS LanCode
                  </isNotNull>

                  <isNotNull property="categoryQuerySql">
                  , ( CASE WHEN ( $categoryQuerySql$ ) THEN 1 ELSE 0 END ) As categoryMatch
                  </isNotNull>

                  FROM vw_EntryWithCategory siblings  <include refid="WITH_NOEXPAND"/>

                  <isNotNull property="categoryQuerySql">
                  LEFT OUTER JOIN EntryCategory searchCategories
                  ON searchCategories.EntryStoreId = siblings.EntryStoreId
                  </isNotNull>

                  WHERE siblings.Scheme = #collection#

                  <isNotNull property="language">
                  AND ((siblings.LanCode = #language# AND siblings.CountryCode = #country#)
                         OR (siblings.LanCode = '**' AND siblings.CountryCode = '**'))
                  </isNotNull>

                  <!-- If any joinWorkspaces were specified on the query, we need to limit our rows here
                  to only include the right rows. -->
                  <isNotNull property="joinWorkspaces">
                  AND siblings.Workspace IN
                     <iterate property="joinWorkspaces" open="(" close=")" conjunction=",">
                       #joinWorkspaces[]#
                     </iterate>
                  </isNotNull>

                  GROUP BY siblings.Term
              ) matchingSiblingEntries

              ON recentlyChangedEntries.Term = matchingSiblingEntries.Term
              AND recentlyChangedEntries.UpdateTimestamp = matchingSiblingEntries.MaxUpdateTimestamp
              <isNotNull property="categoryQuerySql">
              AND categoryMatch > 0
              </isNotNull>
              <isNotNull property="language">
              AND #language# = matchingSiblingEntries.LanCode
              </isNotNull>
      
            ORDER BY recentlyChangedEntries.UpdateTimestamp ASC
           <include refid="paginationSuffix"/>
    </sql>

    <select id="selectAggregateEntries" parameterClass="map" resultMap="entryResult">
        SELECT entries.EntryStoreId AS EntryStoreId,
               entries.Workspace AS Workspace,
               entries.Collection AS Collection,
               entries.LanCode AS LanCode,
               entries.CountryCode AS CountryCode,
               entries.EntryId AS EntryId,
               entries.UpdateDate AS UpdateDate,
               entries.CreateDate AS CreateDate,
               CAST(entries.UpdateTimestamp AS BIGINT) AS UpdateTimestamp,
               entries.DeleteFlag AS DeleteFlag,
               entries.RevisionNum AS RevisionNum,
               entries.ContentHashCode AS contentHashCode,
               categories.Scheme AS Scheme,
               categories.Term AS Term,
               categories.Term AS Label
          FROM
        (
        <!-- This inner query determines the aggregate entries to pull - now we need to join in the
             EntryStore data and EntryCategory data to get the data set to return -->
            <include refid="SELECT_modifiedAggregateEntries"/>
        ) aggregateEntryIds
        <!-- This join to "candidates" re-selects all of the members of the aggregates -->
         INNER JOIN vw_EntryWithCategory candidates <include refid="WITH_NOEXPAND"/>
            ON candidates.Scheme = #collection#
           AND candidates.Term = aggregateEntryIds.AggregateEntryId
        <isNotNull property="language">
           AND ((candidates.LanCode = #language# AND candidates.CountryCode = #country#)
                OR (candidates.LanCode = '**' AND candidates.CountryCode = '**'))
        </isNotNull>
        <!-- This join to "entries" pulls in the EntryStore data, and filters out any candidates
             that were outside of the set of join workspaces requested for the feed -->
         INNER JOIN EntryStore entries
            ON entries.EntryStoreId = candidates.EntryStoreId
        <isNotNull property="joinWorkspaces">
           AND entries.Workspace IN
           <iterate property="joinWorkspaces" open="(" close=")" conjunction=",">
               #joinWorkspaces[]#
           </iterate>
        </isNotNull>
        <!-- This join to "categories" pulls all of the search categories for the entries -->
         INNER JOIN EntryCategory categories
            ON categories.EntryStoreId = candidates.EntryStoreId
           AND (
                    categories.Scheme != #collection#
                 OR categories.Term = aggregateEntryIds.AggregateEntryId
               )
        <!-- And, of course, we order by UpdateTimestamp to get them in the proper order, and by
             AggregateEntryId to make sure that components of the same Aggregate are grouped
             together (because it is possible for two aggregates to have the same UpdateTimestamp
             -->
         ORDER BY aggregateEntryIds.UpdateTimestamp, aggregateEntryIds.AggregateEntryId
    </select>

    <select id="countModifiedAggregateEntries" parameterClass="map" resultClass="int">
        SELECT COUNT(AggregateEntryId) AS entryCount
          FROM (<include refid="SELECT_modifiedAggregateEntries"/>)
    </select>
    
</sqlMap>

