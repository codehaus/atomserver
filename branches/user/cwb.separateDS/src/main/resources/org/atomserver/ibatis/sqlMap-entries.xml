<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<!DOCTYPE sqlMap
        PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN"
        "http://www.ibatis.com/dtd/sql-map-2.dtd">
<!--
 Copyright (c) 2007 HomeAway, Inc.
  All rights reserved.  http://www.atomserver.org

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--  iBatis SQL Map for EntryStore -->
<sqlMap>


    <!--  The Improved Form, which spits out SQL something like this; 
 SELECT
 TOP 21
 entry.EntryStoreId AS EntryStoreId,
 entry.Workspace AS Workspace,
 entry.Collection AS Collection,
 entry.LanCode AS LanCode,
 entry.CountryCode AS CountryCode,
 entry.EntryId AS EntryId,
 entry.UpdateDate AS UpdateDate,
 entry.CreateDate AS CreateDate,
 CAST(UpdateTimestamp AS BIGINT) AS UpdateTimestamp,
 entry.DeleteFlag AS DeleteFlag,
 entry.RevisionNum AS RevisionNum
 FROM EntryStore entry
 WHERE UpdateTimestamp > CAST(0 AS  TIMESTAMP  )
 AND Workspace = 'inquiries'
 AND entry.EntryStoreId IN (

     select X.EntryStoreId from EntryCategory X where X.Scheme = 'urn:inquiry.state' AND X.Term = 'INTERVENE'
     intersect
     (
         select Y.EntryStoreId from EntryCategory Y where Y.Scheme = 'urn:inquiry.stripes' AND Y.Term = '3'
         union
         select Y.EntryStoreId from EntryCategory Y where Y.Scheme = 'urn:inquiry.stripes' AND Y.Term = '2'
     )
 )
 AND ( DATEADD(s, -1 * 60, GETDATE()) >= UpdateDate )
 AND Collection='homeaway'
 ORDER BY entry.UpdateTimestamp
    -->

    <sql id="selectFeedPageSetOps" >
        SELECT <include refid="paginationPrefix"/>
               entry.EntryStoreId AS EntryStoreId,
               entry.Workspace AS Workspace,
               entry.Collection AS Collection,
               entry.LanCode AS LanCode,
               entry.CountryCode AS CountryCode,
               entry.EntryId AS EntryId,
               entry.UpdateDate AS UpdateDate,
               entry.CreateDate AS CreateDate,
               CAST(UpdateTimestamp AS BIGINT) AS UpdateTimestamp,
               entry.DeleteFlag AS DeleteFlag,
               entry.RevisionNum AS RevisionNum,
               entry.ContentHashCode AS contentHashCode
          FROM EntryStore entry
         WHERE UpdateTimestamp > CAST($startIndex$ AS <include refid="timestampType"/>)
           AND Workspace = CAST(#workspace# AS VARCHAR(20))
          <isNotNull property="categoryQuerySql">
           AND entry.EntryStoreId IN
           $categoryQuerySql$
          </isNotNull>
          <isNotNull property="updatedMin">
            AND UpdateDate >= CAST(#updatedMin# AS <include refid="dateType"/>)
          </isNotNull>
          <isNotNull property="updatedMax">
            AND UpdateDate &lt; CAST(#updatedMax# AS <include refid="dateType"/>)
          </isNotNull>
          <isNotEqual property="endIndex" compareValue="-1">
            AND UpdateTimestamp &lt;= CAST($endIndex$ AS <include refid="timestampType"/>)
          </isNotEqual>
          <isNotNull property="latencySeconds">
            AND (
            <isEqual property="dbType" compareValue="hsql">
             DATEDIFF('ss', UpdateDate, NOW()) >= $latencySeconds$
            </isEqual>
            <isEqual property="dbType" compareValue="sqlserver">
             DATEADD(s, -1 * $latencySeconds$, GETDATE()) >= UpdateDate
            </isEqual>
            <isEqual property="dbType" compareValue="postgres">
             NOW() - interval '$latencySeconds$ seconds' >= UpdateDate
            </isEqual>
            )
          </isNotNull>
          <isNotNull property="collection">
            AND Collection = CAST(#collection# AS VARCHAR(20))
          </isNotNull>
          <isNotNull property="language">
            AND LanCode = CAST(#language# AS CHAR(2))
            <isNotNull property="country">
            AND CountryCode = CAST(#country# AS CHAR(2))
            </isNotNull>
          </isNotNull>
          ORDER BY entry.UpdateTimestamp <include refid="paginationSuffix"/>
     </sql>

    <select id="selectFeedPage" parameterClass="map" resultMap="entryResultSansCategories">
        <include refid="selectFeedPageSetOps"/>
    </select>

    <!-- SELECT the EntryStoreId for an entry by it's 5-tuple key -->
    <select id="selectEntryInternalId" parameterClass="map" resultClass="int">
        SELECT entry.EntryStoreId AS EntryStoreId
          FROM EntryStore entry
         WHERE Workspace = CAST(#workspace# AS VARCHAR(20))
           AND Collection = CAST(#collection# AS VARCHAR(20))
           AND LanCode = CAST(#language# AS CHAR(2))
           AND CountryCode = CAST(#country# AS CHAR(2))
           AND EntryId = CAST(#entryId# AS VARCHAR(32))
    </select>

    <select id="selectCategoriesForEntries" parameterClass="map" resultMap="entryCategoryResult">
        SELECT EntryStore.EntryStoreId AS EntryStoreId,
               Workspace,
               Collection,
               EntryId,
               Scheme,
               Term,
               Label
          FROM EntryCategory JOIN EntryStore On EntryCategory.EntryStoreId = EntryStore.EntryStoreId
         WHERE Workspace = CAST(#workspace# AS VARCHAR(20))
           AND Collection = CAST(#collection# AS VARCHAR(20))
           AND EntryId IN
           <iterate property="entryIds" open="(" close=")" conjunction=",">#entryIds[]#</iterate>
    </select>

    <sql id="SELECT_EntryStore_JOIN_EntryCategory">
        <!-- this fragment encapsulates selecting the relevant columns from the EntryStore and
             EntryCategory tables when pulling back entries, whether retrieving a single Entry or
             an entire Feed -->
        SELECT entry.EntryStoreId AS EntryStoreId,
               entry.Workspace AS Workspace,
               entry.Collection AS Collection,
               entry.LanCode AS LanCode,
               entry.CountryCode AS CountryCode,
               entry.EntryId AS EntryId,
               entry.UpdateDate AS UpdateDate,
               entry.CreateDate AS CreateDate,
               CAST(entry.UpdateTimestamp AS BIGINT) AS UpdateTimestamp,
               entry.DeleteFlag AS DeleteFlag,
               entry.RevisionNum AS RevisionNum,
               entry.ContentHashCode as ContentHashCode,
               cat.Scheme AS Scheme,
               cat.Term AS Term,
               cat.Label AS Label
          FROM EntryStore entry
          LEFT OUTER JOIN EntryCategory cat
            ON entry.EntryStoreId = cat.EntryStoreId
    </sql>

    <select id="selectEntryByInternalId" parameterClass="map" resultMap="entryResult">
        <!-- SELECT a single Entry when we already know its primary key -->
        <include refid="SELECT_EntryStore_JOIN_EntryCategory"/>
        WHERE entry.EntryStoreId = CAST(#internalId# AS int)
    </select>

    <select id="selectEntry" parameterClass="map" resultMap="entryResult">
        <!-- SELECT a single Entry based on the 5-tuple key -->
        <include refid="SELECT_EntryStore_JOIN_EntryCategory"/>
        WHERE entry.Workspace = CAST(#workspace# AS VARCHAR(20))
          AND entry.Collection = CAST(#collection# AS VARCHAR(20))
          AND entry.LanCode = CAST(#language# AS CHAR(2))
          AND entry.CountryCode = CAST(#country# AS CHAR(2))
          AND entry.EntryId = CAST(#entryId# AS VARCHAR(32))
    </select>

    <select id="selectEntries" parameterClass="map" resultMap="entryResult">
        <!-- SELECT all the entries that match some part of the 5-tuple key -->
        <include refid="SELECT_EntryStore_JOIN_EntryCategory"/>
        WHERE entry.Workspace = CAST(#workspace# AS VARCHAR(20))
        <dynamic>
            <isNotNull property="collection">
                AND entry.Collection = CAST(#collection# AS VARCHAR(20))
            </isNotNull>
            <isNotNull property="entryId">
                AND entry.EntryId = CAST(#entryId# AS VARCHAR(32))
            </isNotNull>
            <isNotNull property="language">
                AND LanCode = CAST(#language# AS CHAR(2))
            </isNotNull>
            <isNotNull property="country">
                AND CountryCode = CAST(#country# AS CHAR(2))
            </isNotNull>
        </dynamic>
    </select>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <select id="selectEntryBatch" parameterClass="map" resultMap="entryResult">
        <!-- SELECT a batch of specific Entries from the DB based on the 5-tuple keys -->
        <include refid="SELECT_EntryStore_JOIN_EntryCategory"/>
        WHERE entry.Workspace = CAST(#workspace# AS VARCHAR(20))
          AND entry.Collection = CAST(#collection# AS VARCHAR(20))
          AND LanCode = CAST(#language# AS CHAR(2))
          AND CountryCode = CAST(#country# AS CHAR(2))
          AND entry.EntryId IN
        <iterate property="entryIds" open="(" close=")" conjunction=",">#entryIds[]#</iterate>
          ORDER BY UpdateTimestamp ASC
    </select>

    <select id="selectEntriesByLastModified" parameterClass="map" resultMap="entryResult">
        <!-- SELECT the entries that were last modified since the given time -->
        <include refid="SELECT_EntryStore_JOIN_EntryCategory"/>
        WHERE UpdateDate >= CAST(#updatedMin# AS <include refid="dateType"/>)
          AND entry.Workspace = CAST(#workspace# AS VARCHAR(20))
        <isNotNull property="collection">
          AND entry.Collection = CAST(#collection# AS VARCHAR(20))
        </isNotNull>
        ORDER BY UpdateDate
    </select>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <select id="selectEntriesByLastModifiedSeqNum" parameterClass="map" resultMap="entryResult">
        <include refid="SELECT_EntryStore_JOIN_EntryCategory"/>
        WHERE UpdateDate >= CAST(#updatedMin# AS <include refid="dateType"/>)
          AND entry.Workspace = CAST(#workspace# AS VARCHAR(20))
        <isNotNull property="collection">
          AND entry.Collection = CAST(#collection# AS VARCHAR(20))
        </isNotNull>
        ORDER BY UpdateTimestamp
    </select>

    <select id="countEntriesTotal" parameterClass="map" resultClass="int">
        SELECT COUNT(*) as entrycount FROM EntryStore
         WHERE Workspace = CAST(#workspace# AS VARCHAR(20))
        <isNotNull property="collection">
            AND Collection = CAST(#collection# AS VARCHAR(20))
        </isNotNull>
    </select>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <select id="countEntriesByLastModified" parameterClass="map" resultClass="int">
        SELECT COUNT(*) as entrycount FROM EntryStore
         WHERE UpdateDate >= CAST(#updatedMin# AS <include refid="dateType"/>)
           AND Workspace = CAST(#workspace# AS VARCHAR(20))
        <isNotNull property="collection">
            AND Collection = CAST(#collection# AS VARCHAR(20))
        </isNotNull>
    </select>

    <select id="selectMaxIndex" parameterClass="map" resultClass="long">
        SELECT CAST(MAX(entry.UpdateTimestamp) AS BIGINT) AS UpdateTimestamp
          FROM EntryStore entry
        <isNotNull property="latencySeconds">
         WHERE (
            <isEqual property="dbType" compareValue="hsql">
             DATEDIFF('ss', UpdateDate, NOW()) >= $latencySeconds$
            </isEqual>
            <isEqual property="dbType" compareValue="sqlserver">
             DATEADD(s, -1 * $latencySeconds$, GETDATE()) >= UpdateDate
            </isEqual>
            <isEqual property="dbType" compareValue="postgres">
             NOW() - interval '$latencySeconds$ seconds' >= UpdateDate
            </isEqual>
            )
            <isNotNull property="updatedMax">
                AND UpdateDate &lt; CAST(#updatedMax# AS <include refid="dateType"/>)
            </isNotNull>
        </isNotNull>
        <isNull property="latencySeconds">
            <isNotNull property="updatedMax">
                WHERE UpdateDate &lt; CAST(#updatedMax# AS <include refid="dateType"/>)
            </isNotNull>
        </isNull>
    </select>

    <select id="selectEntryStats" parameterClass="map" resultMap="entryStatsResult">
      SELECT (CASE WHEN maxTimestamp is NULL THEN 0 ELSE maxTimestamp END) AS maxTimestamp,
             (CASE WHEN minTimestamp is NULL THEN 0 ELSE minTimestamp END) AS minTimestamp
      FROM (
              SELECT CAST(MAX(entry.UpdateTimestamp) AS BIGINT) AS maxTimestamp,
                     CAST(MIN(entry.UpdateTimestamp) AS BIGINT) AS minTimeStamp
              FROM EntryStore entry
      ) entries
    </select>

</sqlMap>

