<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<!DOCTYPE sqlMap
        PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN"
        "http://www.ibatis.com/dtd/sql-map-2.dtd">
<!--
 Copyright (c) 2007 HomeAway, Inc.
  All rights reserved.  http://www.atomserver.org

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--  iBatis SQL Map for EntryStore -->
<sqlMap>

    <select id="selectFeedPage" parameterClass="map" resultMap="entryResultSansCategories">
        SELECT <include refid="paginationPrefix"/>
               entry.EntryStoreId AS EntryStoreId,
               entry.Workspace AS Workspace,
               entry.Collection AS Collection,
               entry.LanCode AS LanCode,
               entry.CountryCode AS CountryCode,
               entry.EntryId AS EntryId,
               entry.UpdateDate AS UpdateDate,
               entry.CreateDate AS CreateDate,
           <isEqual property="dbType" compareValue="sqlserver">
               CONVERT(BIGINT, UpdateTimestamp) AS UpdateTimestamp,
           </isEqual>
           <isNotEqual property="dbType" compareValue="sqlserver">
               entry.UpdateTimestamp AS UpdateTimestamp,
           </isNotEqual>
               entry.DeleteFlag AS DeleteFlag,
               entry.RevisionNum AS RevisionNum
          FROM EntryStore entry
        <isNotNull property="categoryQuerySql">
         INNER JOIN EntryCategory searchCategories
            ON searchCategories.EntryStoreId = entry.EntryStoreId
        </isNotNull>
         WHERE UpdateDate >= #lastModifiedDate#
           AND UpdateTimestamp > #lastModifiedSeqNum#
           AND Workspace = #workspace#
        <isNotNull property="collection">
           AND Collection=#collection#
        </isNotNull>
        <isNotNull property="language">
           AND LanCode = #language#
            <isNotNull property="country">
           AND CountryCode = #country#
            </isNotNull>
        </isNotNull>
        GROUP BY entry.EntryStoreId,
                 entry.Workspace,
                 entry.Collection,
                 entry.LanCode,
                 entry.CountryCode,
                 entry.EntryId,
                 entry.UpdateDate,
                 entry.CreateDate,
                 entry.UpdateTimestamp,
                 entry.DeleteFlag,
                 entry.RevisionNum
        <isNotNull property="categoryQuerySql">HAVING $categoryQuerySql$</isNotNull>
        ORDER BY entry.UpdateTimestamp
        <include refid="paginationSuffix"/>
    </select>

    <!-- SELECT the EntryStoreId for an entry by it's 5-tuple key -->
    <select id="selectEntryInternalId" parameterClass="map" resultClass="int">
        SELECT entry.EntryStoreId AS EntryStoreId
          FROM EntryStore entry
         WHERE Workspace=#workspace#
           AND Collection=#collection#
           AND LanCode=#language#
           AND CountryCode=#country#
           AND EntryId=#entryId#
    </select>

    <select id="selectCategoriesForEntries" parameterClass="map" resultMap="entryCategoryResult">
        SELECT EntryStore.EntryStoreId AS EntryStoreId,
               Workspace,
               Collection,
               EntryId,
               Scheme,
               Term,
               Label
          FROM EntryCategory JOIN EntryStore On EntryCategory.EntryStoreId = EntryStore.EntryStoreId
         WHERE Workspace = #workspace#
           AND Collection = #collection#
           AND EntryId IN
           <iterate property="entryIds" open="(" close=")" conjunction=",">#entryIds[]#</iterate>
    </select>

    <sql id="SELECT_EntryStore_JOIN_EntryCategory">
        <!-- this fragment encapsulates selecting the relevant columns from the EntryStore and
             EntryCategory tables when pulling back entries, whether retrieving a single Entry or
             an entire Feed -->
        SELECT entry.EntryStoreId AS EntryStoreId,
               entry.Workspace AS Workspace,
               entry.Collection AS Collection,
               entry.LanCode AS LanCode,
               entry.CountryCode AS CountryCode,
               entry.EntryId AS EntryId,
               entry.UpdateDate AS UpdateDate,
               entry.CreateDate AS CreateDate,
               <include refid="timestampColumn" />,
               entry.DeleteFlag AS DeleteFlag,
               entry.RevisionNum AS RevisionNum,
               cat.Scheme AS Scheme,
               cat.Term AS Term,
               cat.Label AS Label
          FROM EntryStore entry
          LEFT OUTER JOIN EntryCategory cat
            ON entry.EntryStoreId = cat.EntryStoreId
    </sql>

    <select id="selectEntryByInternalId" parameterClass="map" resultMap="entryResult">
        <!-- SELECT a single Entry when we already know its primary key -->
        <include refid="SELECT_EntryStore_JOIN_EntryCategory"/>
        WHERE entry.EntryStoreId = #internalId#
    </select>

    <select id="selectEntry" parameterClass="map" resultMap="entryResult">
        <!-- SELECT a single Entry based on the 5-tuple key -->
        <include refid="SELECT_EntryStore_JOIN_EntryCategory"/>
        WHERE entry.Workspace=#workspace#
          AND entry.Collection=#collection#
          AND entry.LanCode=#language#
          AND entry.CountryCode=#country#
          AND entry.EntryId=#entryId#
    </select>

    <select id="selectEntries" parameterClass="map" resultMap="entryResult">
        <!-- SELECT all the entries that match some part of the 5-tuple key -->
        <include refid="SELECT_EntryStore_JOIN_EntryCategory"/>
        WHERE entry.Workspace=#workspace#
        <dynamic>
            <isNotNull property="collection">
                AND entry.Collection=#collection#
            </isNotNull>
            <isNotNull property="entryId">
                AND entry.EntryId=#entryId#
            </isNotNull>
            <isNotNull property="language">
                AND LanCode=#language#
            </isNotNull>
            <isNotNull property="country">
                AND CountryCode=#country#
            </isNotNull>
        </dynamic>
    </select>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <select id="selectEntryBatch" parameterClass="map" resultMap="entryResult">
        <!-- SELECT a batch of specific Entries from the DB based on the 5-tuple keys -->
        <include refid="SELECT_EntryStore_JOIN_EntryCategory"/>
        WHERE entry.Workspace=#workspace#
          AND entry.Collection=#collection#
          AND LanCode=#language#
          AND CountryCode=#country#
          AND entry.EntryId IN
        <iterate property="entryIds" open="(" close=")" conjunction=",">#entryIds[]#</iterate>
          ORDER BY UpdateTimestamp ASC
    </select>

    <select id="selectEntriesByLastModified" parameterClass="map" resultMap="entryResult">
        <!-- SELECT the entries that were last modified since the given time -->
        <include refid="SELECT_EntryStore_JOIN_EntryCategory"/>
        WHERE UpdateDate >= #lastModifiedDate#
          AND entry.Workspace = #workspace#
        <isNotNull property="collection">
          AND entry.Collection=#collection#
        </isNotNull>
        ORDER BY UpdateDate
    </select>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <select id="selectEntriesByLastModifiedSeqNum" parameterClass="map" resultMap="entryResult">
        <include refid="SELECT_EntryStore_JOIN_EntryCategory"/>
        WHERE UpdateDate >= #lastModifiedDate#
          AND entry.Workspace = #workspace#
        <isNotNull property="collection">
          AND entry.Collection=#collection#
        </isNotNull>
        ORDER BY UpdateTimestamp
    </select>

    <select id="countEntriesTotal" parameterClass="map" resultClass="int">
        SELECT COUNT(*) as entrycount FROM EntryStore
         WHERE Workspace = #workspace#
        <isNotNull property="collection">
            AND Collection=#collection#
        </isNotNull>
    </select>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <select id="countEntriesByLastModified" parameterClass="map" resultClass="int">
        <![CDATA[
        SELECT COUNT(*) as entrycount FROM EntryStore
         WHERE UpdateDate >= #lastModifiedDate#
           AND Workspace = #workspace#
        ]]>
        <isNotNull property="collection">
            AND Collection=#collection#
        </isNotNull>
    </select>

</sqlMap>

